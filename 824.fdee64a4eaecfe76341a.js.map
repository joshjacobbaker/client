{"version":3,"file":"824.fdee64a4eaecfe76341a.js","mappings":"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","sources":["webpack://reactserversiderendering/./node_modules/react-intersection-observer/react-intersection-observer.m.js","webpack://reactserversiderendering/./node_modules/framer-motion/dist/es/animation/animation-controls.mjs","webpack://reactserversiderendering/./node_modules/framer-motion/dist/es/animation/use-animation.mjs"],"sourcesContent":["import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView,\n      onChange = _ref.onChange;\n\n  var unobserve = React.useRef();\n  var callback = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1]; // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n\n  callback.current = onChange;\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n","import { __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { stopAnimation, animateVisualElement } from '../render/utils/animation.mjs';\nimport { setValues } from '../render/utils/setters.mjs';\n\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    var hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */\n    var pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */\n    var subscribers = new Set();\n    var controls = {\n        subscribe: function (visualElement) {\n            subscribers.add(visualElement);\n            return function () { return void subscribers.delete(visualElement); };\n        },\n        start: function (definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */\n            if (hasMounted) {\n                var animations_1 = [];\n                subscribers.forEach(function (visualElement) {\n                    animations_1.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride: transitionOverride,\n                    }));\n                });\n                return Promise.all(animations_1);\n            }\n            else {\n                return new Promise(function (resolve) {\n                    pendingAnimations.push({\n                        animation: [definition, transitionOverride],\n                        resolve: resolve,\n                    });\n                });\n            }\n        },\n        set: function (definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach(function (visualElement) {\n                setValues(visualElement, definition);\n            });\n        },\n        stop: function () {\n            subscribers.forEach(function (visualElement) {\n                stopAnimation(visualElement);\n            });\n        },\n        mount: function () {\n            hasMounted = true;\n            pendingAnimations.forEach(function (_a) {\n                var animation = _a.animation, resolve = _a.resolve;\n                controls.start.apply(controls, __spreadArray([], __read(animation), false)).then(resolve);\n            });\n            return function () {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.mjs';\nimport { useEffect } from 'react';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimation() {\n    var controls = useConstant(animationControls);\n    useEffect(controls.mount, []);\n    return controls;\n}\n\nexport { useAnimation };\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","observe","element","callback","options","fallbackInView","undefined","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","Object","keys","sort","filter","key","map","root","has","set","toString","get","optionsToId","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","length","unobserve","size","disconnect","useInView","_temp","_ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_React$useState","state","setState","current","setRef","node","result","ref","animationControls","hasMounted","pendingAnimations","subscribers","Set","controls","subscribe","visualElement","add","delete","start","definition","transitionOverride","animations_1","Promise","all","resolve","animation","stop","mount","_a","apply","then","useAnimation","useEffect"],"sourceRoot":""}